import cv2
import numpy as np
import os

def compress_image(image_path, output_path, quality=90):
    # Read the image
    img = cv2.imread(image_path)

    # Convert the image to YCbCr color space
    img_yuv = cv2.cvtColor(img, cv2.COLOR_BGR2YUV)

    # Apply DCT to the Y channel
    img_y = img_yuv[:,:,0]
    dct = cv2.dct(np.float32(img_y))
    
    # Apply compression by setting high-frequency DCT coefficients to zero
    compressed_dct = np.round(dct / quality) * quality
    
    # Inverse DCT
    idct = cv2.idct(compressed_dct)
    
    # Replace the Y channel with the compressed version
    img_yuv[:,:,0] = np.uint8(idct)
    
    # Convert back to BGR color space
    compressed_img = cv2.cvtColor(img_yuv, cv2.COLOR_YUV2BGR)
    
    # Write the compressed image to the output file
    cv2.imwrite(output_path, compressed_img)

    print(f"Image compressed and saved to {output_path}")

# Example usage
if __name__ == "__main__":
    # Input image path
    input_image = "input_image.jpg"
    
    # Output image path
    output_image = "compressed_image.jpg"

    # Compression quality (adjust as needed)
    quality = 90

    # Compress the image
    compress_image(input_image, output_image, quality)
